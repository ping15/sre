# Generated by Django 3.2.4 on 2024-07-25 07:35

import django.contrib.auth.models
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("platform_management", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="ClientCompany",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=32, unique=True, verbose_name="客户公司名称"),
                ),
                ("contact_person", models.CharField(max_length=32, verbose_name="联系人")),
                ("contact_phone", models.CharField(max_length=16, verbose_name="电话")),
                ("contact_email", models.EmailField(max_length=64, verbose_name="邮箱")),
                (
                    "payment_method",
                    models.CharField(max_length=32, verbose_name="参会费支付方式"),
                ),
                (
                    "affiliated_manage_company",
                    models.CharField(max_length=64, verbose_name="管理公司"),
                ),
                (
                    "certificate_address",
                    models.CharField(max_length=128, verbose_name="证书收件地址"),
                ),
                ("recipient_name", models.CharField(max_length=32, verbose_name="收件人")),
                (
                    "recipient_phone",
                    models.CharField(max_length=16, verbose_name="收件人电话"),
                ),
                (
                    "invoice_company_name",
                    models.CharField(max_length=64, verbose_name="公司名称"),
                ),
                (
                    "tax_identification_number",
                    models.CharField(max_length=32, verbose_name="纳税人识别号"),
                ),
                (
                    "invoice_company_address",
                    models.CharField(max_length=128, verbose_name="单位地址"),
                ),
                (
                    "invoice_company_phone",
                    models.CharField(max_length=16, verbose_name="单位电话"),
                ),
                ("bank_name", models.CharField(max_length=64, verbose_name="开户行")),
                ("bank_account", models.CharField(max_length=32, verbose_name="账号")),
            ],
        ),
        migrations.CreateModel(
            name="ClientStudent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=32, verbose_name="名称")),
                ("gender", models.CharField(max_length=32, verbose_name="性别")),
                ("id_number", models.CharField(max_length=32, verbose_name="身份证号")),
                ("education", models.CharField(max_length=32, verbose_name="学历")),
                ("phone", models.CharField(max_length=16, verbose_name="电话")),
                ("email", models.EmailField(max_length=64, verbose_name="邮箱")),
                (
                    "affiliated_client_company",
                    models.CharField(max_length=64, verbose_name="客户公司"),
                ),
                ("department", models.CharField(max_length=32, verbose_name="部门")),
                ("position", models.CharField(max_length=32, verbose_name="职位")),
                ("password", models.CharField(max_length=256, verbose_name="登录密码")),
                ("id_photo", models.JSONField(default=dict, verbose_name="证件照")),
            ],
        ),
        migrations.CreateModel(
            name="Instructor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(db_index=True, max_length=32, verbose_name="姓名"),
                ),
                ("phone", models.CharField(max_length=16, verbose_name="电话")),
                ("email", models.EmailField(max_length=64, verbose_name="邮箱")),
                ("password", models.CharField(max_length=256, verbose_name="登录密码")),
                ("city", models.CharField(max_length=32, verbose_name="所在城市")),
                ("company", models.CharField(max_length=64, verbose_name="所在公司")),
                ("department", models.CharField(max_length=32, verbose_name="部门")),
                ("position", models.CharField(max_length=32, verbose_name="岗位")),
                ("introduction", models.TextField(verbose_name="简介")),
                (
                    "teachable_courses",
                    models.JSONField(default=list, verbose_name="可授课程"),
                ),
                (
                    "satisfaction_score",
                    models.FloatField(default=0.0, verbose_name="满意度评分"),
                ),
                ("hours_taught", models.IntegerField(default=0, verbose_name="已授课时")),
                (
                    "is_partnered",
                    models.BooleanField(default=True, verbose_name="是否合作"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ManageCompany",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=32, unique=True, verbose_name="名称"),
                ),
                ("email", models.EmailField(max_length=32, verbose_name="邮箱")),
                ("type", models.CharField(max_length=32, verbose_name="类型")),
            ],
        ),
        migrations.AlterField(
            model_name="attachment",
            name="file",
            field=models.FileField(upload_to="attachment/", verbose_name="附件"),
        ),
        migrations.CreateModel(
            name="Administrator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. "
                                  "Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "username",
                    models.CharField(db_index=True, max_length=32, verbose_name="名称"),
                ),
                (
                    "phone",
                    models.CharField(db_index=True, max_length=16, verbose_name="手机号码"),
                ),
                (
                    "manage_company",
                    models.CharField(max_length=32, verbose_name="管理公司"),
                ),
                (
                    "role",
                    models.CharField(db_index=True, max_length=16, verbose_name="权限角色"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        related_name="manager_set",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        related_name="manager_set",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
